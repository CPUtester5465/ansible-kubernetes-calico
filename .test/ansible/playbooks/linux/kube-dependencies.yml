- hosts: linux_new_qa
  become: yes
  become_user: root
  vars:
    kubernetes_version: "1.27.*"

  tasks:
    - name: Check if the file exists
      stat:
        path: /etc/ansible-cluster-log
      register: file_stat

    - name: Create ansible-cluster-log file if it doesn't exist
      copy:
        content: "Your content here"
        dest: /etc/ansible-cluster-log
      when: not file_stat.stat.exists

    - name: Add or update variable in file
      lineinfile:
        path: /etc/ansible-cluster-log
        regexp: "^LOGFILE:"
        line: "LOGFILE:created"

    - name: Read variable value
      shell: "grep '^LOGFILE:' /etc/ansible-cluster-log | cut -d':' -f2"
      register: LOGFILE

    - name: Display variable value
      debug:
        var: LOGFILE.stdout
      when: LOGFILE.stdout == "created"

    - name: update APT packages
      apt:
        update_cache: yes

    - name: Read variable value
      shell: "grep '^NETTOOLS:' /etc/ansible-cluster-log | cut -d':' -f2"
      register: NETTOOLS

    - name: install nettools
      shell: |
        sudo apt update && sudo apt upgrade -y
      when: not NETTOOLS.stdout == "created"

    - name: install nettools
      shell: |
        sudo apt update && sudo apt install -y apt-transport-https ca-certificates curl software-properties-common gnupg2
      when: not NETTOOLS.stdout == "created"

    - name: Add or update variable in file NETTOOLS
      lineinfile:
        path: /etc/ansible-cluster-log
        regexp: "^NETTOOLS:"
        line: "NETTOOLS:disabled"
      when: not NETTOOLS.stdout == "created"

    - name: Read variable value
      shell: "grep '^SWAP:' /etc/ansible-cluster-log | cut -d':' -f2"
      register: SWAP

    - name: disable SWAP and ufw
      shell: |
        sudo ufw disable
      when: not SWAP.stdout == "disabled"

    - name: disable SWAP and ufw
      shell: |
        sudo swapoff -a
      when: not SWAP.stdout == "disabled"

    - name: Add or update variable in file SWAP
      lineinfile:
        path: /etc/ansible-cluster-log
        regexp: "^SWAP:"
        line: "SWAP:disabled"
      when: not SWAP.stdout == "disabled"

    - name: Read variable value
      shell: "grep '^UFW:' /etc/ansible-cluster-log | cut -d':' -f2"
      register: UFW

    - name: disable ufw
      shell: |
        sudo ufw disable
      when: not UFW.stdout == "disabled"

    - name: Add or update variable in file UFW
      lineinfile:
        path: /etc/ansible-cluster-log
        regexp: "^UFW:"
        line: "UFW:disabled"
      when: not UFW.stdout == "disabled"

    - name: Read variable value
      shell: "grep '^IPTABL:' /etc/ansible-cluster-log | cut -d':' -f2"
      register: IPTABL

    - name: Configure iptables to see bridged traffic
      shell: |
        cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
        overlay
        br_netfilter
        EOF
        sudo modprobe overlay
        sudo modprobe br_netfilter
        cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
        EOF
        sudo sysctl --system
      when: not IPTABL.stdout == "created"

    - name: Add or update variable in file IPTABL
      lineinfile:
        path: /etc/ansible-cluster-log
        regexp: "^IPTABL:"
        line: "IPTABL:created"
      when: not IPTABL.stdout == "created"

    - name: Restart sysctl
      shell: |
        sudo sysctl --system

    - name: Read variable value
      shell: "grep '^CALINETFILE:' /etc/ansible-cluster-log | cut -d':' -f2"
      register: CALINETFILE

    - name: Create cali.network file
      copy:
        content: |
          [Match]
          Name=cali*

          [Link]
          Unmanaged=yes
        dest: /etc/systemd/network/cali.network
      when: not CALINETFILE.stdout == "created"

    - name: Add or update variable in file CALINETFILE
      lineinfile:
        path: /etc/ansible-cluster-log
        regexp: "^CALINETFILE:"
        line: "CALINETFILE:created"
      when: not CALINETFILE.stdout == "created"

    - name: Read variable value
      shell: "grep '^CALIVXNETFILE:' /etc/ansible-cluster-log | cut -d':' -f2"
      register: CALIVXNETFILE

    - name: Create calivx.network file
      copy:
        content: |
          [Match]
          Name=vxlan.calico

          [Link]
          Unmanaged=yes
        dest: /etc/systemd/network/cali-vxlan.network
      when: not CALIVXNETFILE.stdout == "created"

    - name: Add or update variable in file CALIVXNETFILE
      lineinfile:
        path: /etc/ansible-cluster-log
        regexp: "^CALIVXNETFILE:"
        line: "CALIVXNETFILE:created"
      when: not CALIVXNETFILE.stdout == "created"

    - name: Read variable value
      shell: "grep '^LIMITSCONF:' /etc/ansible-cluster-log | cut -d':' -f2"
      register: LIMITSCONF

    - name: Create limits file
      lineinfile:
        path: /etc/security/limits.conf
        line: "{{ item }}"
      loop:
        - "* - nofile 655360"
        - "* - memlock unlimited"
        - "* - nproc 131072"
      when: not LIMITSCONF.stdout == "created"

    - name: Add or update variable in file LIMITSCONF
      lineinfile:
        path: /etc/ansible-cluster-log
        regexp: "^LIMITSCONF:"
        line: "LIMITSCONF:created"
      when: not LIMITSCONF.stdout == "created"

    - name: Read variable value
      shell: "grep '^SYSTEMCONF:' /etc/ansible-cluster-log | cut -d':' -f2"
      register: SYSTEMCONF

    - name: Add lines to sysctl.conf
      lineinfile:
        path: /etc/sysctl.conf
        line: "{{ item }}"
      loop:
        - "net.core.somaxconn=65535"
        - "vm.max_map_count=262144"
        - "fs.file-max=518144"
        - "# taken from https://www.orangesputnik.eu/ubuntu-server-optimization/"
        - "net.ipv4.tcp_max_orphans = 65536"
        - "net.ipv4.tcp_fin_timeout = 10"
        - "net.ipv4.tcp_keepalive_time = 1800"
        - "net.ipv4.tcp_keepalive_intvl = 15"
        - "net.ipv4.tcp_keepalive_probes = 5"
        - "net.ipv4.tcp_max_syn_backlog = 4096"
        - "net.ipv4.tcp_synack_retries = 3"
        - "net.ipv4.tcp_orphan_retries = 0"
        - "net.ipv4.tcp_syncookies = 0"
        - "net.netfilter.nf_conntrack_max = 262144"
        - "net.ipv4.tcp_timestamps = 1"
        - "net.ipv4.tcp_sack = 1"
        - "net.ipv4.tcp_no_metrics_save = 1"
        - "net.ipv4.tcp_tw_reuse = 1"
        - "net.ipv4.tcp_window_scaling = 1"
        - "net.core.netdev_max_backlog = 1000"
        - "net.core.rmem_default = 212992"
        - "net.core.wmem_default = 212992"
        - "net.core.rmem_max = 16777216"
        - "net.core.wmem_max = 16777216"
        - "# taken from https://www.linuxbabe.com/ubuntu/enable-google-tcp-bbr-ubuntu"
        - "net.ipv4.tcp_congestion_control=bbr"
        - "net.core.default_qdisc=fq"
      when: not SYSTEMCONF.stdout == "created"

    - name: Add or update variable in file SYSTEMCONF
      lineinfile:
        path: /etc/ansible-cluster-log
        regexp: "^SYSTEMCONF:"
        line: "SYSTEMCONF:created"
      when: not SYSTEMCONF.stdout == "created"

    - name: Restart sysctl
      shell: |
        sudo sysctl --system

    - name: Read variable value
      shell: "grep '^K8STOOLS:' /etc/ansible-cluster-log | cut -d':' -f2"
      register: K8STOOLS

    - name: Install k8s tools 1/5
      shell: |
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
      when: not K8STOOLS.stdout == "created"

    - name: Install k8s tools 2/5
      shell: |
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
      when: not K8STOOLS.stdout == "created"

    - name: Install k8s tools 3/5
      shell: |
        sudo apt update && sudo apt-cache madison kubeadm
      when: not K8STOOLS.stdout == "created"

    - name: install Kubelet 4/5
      apt:
        name: kubelet={{ kubernetes_version }}
        state: present
        update_cache: true
      when: not K8STOOLS.stdout == "created"

    - name: install Kubeadm 4/5
      apt:
        name: kubeadm={{ kubernetes_version }}
        state: present
      when: not K8STOOLS.stdout == "created"

    - name: install Kubectl 4/5
      apt:
        name: kubeadm={{ kubernetes_version }}
        state: present
      when: not K8STOOLS.stdout == "created"

    - name: Install k8s tools 5/5
      shell: |
        sudo apt-mark hold kubelet kubeadm kubectl
      when: not K8STOOLS.stdout == "created"

    - name: Add or update variable in file K8STOOLS
      lineinfile:
        path: /etc/ansible-cluster-log
        regexp: "^K8STOOLS:"
        line: "K8STOOLS:created"
      when: not K8STOOLS.stdout == "created"

    - name: Read variable value
      shell: "grep '^CONTAINERDCRI:' /etc/ansible-cluster-log | cut -d':' -f2"
      register: CONTAINERDCRI

    - name: Install containerd 1/6 ##!!!
      become_user: kube-cluster
      shell: |
        cd /home/kube-cluster/
        wget https://github.com/containerd/containerd/releases/download/v1.6.21/containerd-1.6.21-linux-amd64.tar.gz
      when: not CONTAINERDCRI.stdout == "created"

    - name: Install containerd 2/6
      shell: |
        sudo tar Cxzvf /usr/local /home/kube-cluster/containerd-1.6.21-linux-amd64.tar.gz
      when: not CONTAINERDCRI.stdout == "created"

    - name: Install containerd 3/6
      shell: |
        sudo curl -L https://raw.githubusercontent.com/containerd/containerd/main/containerd.service -o /etc/systemd/system/containerd.service
      when: not CONTAINERDCRI.stdout == "created"

    - name: Install containerd 4/6
      shell: |
        sudo systemctl daemon-reload && sudo systemctl enable --now containerd && sudo systemctl start containerd
      when: not CONTAINERDCRI.stdout == "created"

    - name: Install containerd 5/6
      shell: |
        wget https://github.com/opencontainers/runc/releases/download/v1.1.7/runc.amd64
      when: not CONTAINERDCRI.stdout == "created"

    - name: Install containerd 6/6
      shell: |
        sudo install -m 755 runc.amd64 /usr/local/sbin/runc
      when: not CONTAINERDCRI.stdout == "created"

    - name: Generate default configuration
      shell: |
        sudo mkdir /etc/containerd && containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
      when: not CONTAINERDCRI.stdout == "created"

    - name: Сonfigure systemd cgroup driver 1/2
      shell: |
        sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
      when: not CONTAINERDCRI.stdout == "created"

    - name: Сonfigure systemd cgroup driver 2/2
      shell: |
        sudo systemctl restart containerd
      when: not CONTAINERDCRI.stdout == "created"

    - name: Add or update variable in file CONTAINERDCRI
      lineinfile:
        path: /etc/ansible-cluster-log
        regexp: "^CONTAINERDCRI:"
        line: "CONTAINERDCRI:created"
      when: not CONTAINERDCRI.stdout == "created"

    - name: Read variable value
      shell: "grep '^ADMCONFIG:' /etc/ansible-cluster-log | cut -d':' -f2"
      register: ADMCONFIG

    - name: Pull the necessary containers with the command
      become_user: kube-cluster
      command: sudo kubeadm config images pull
      when: not ADMCONFIG.stdout == "created"

    - name: Add or update variable in file ADMCONFIG
      lineinfile:
        path: /etc/ansible-cluster-log
        regexp: "^ADMCONFIG:"
        line: "ADMCONFIG:created"
      when: not ADMCONFIG.stdout == "created"
